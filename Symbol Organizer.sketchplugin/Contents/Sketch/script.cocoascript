var onRun = function(context) {
	var pluginName = "Symbol Organizer";

	// Document variables
	var doc = context.document;
	var command = context.command;
	var pages = doc.pages();
	var page = doc.currentPage();

	// If the current page has symbols...
	if (pageHasSymbols()) {
		// If the current page only contains symbols...
		if (page.artboards().count() == page.symbols().count()) {
			// Get layout settings
			var layoutSettings = getLayoutSettings();

			// If layout settings were provided...
			if (layoutSettings) {
				// Layout variables
				var x = 0;
				var y = 0;
				var xPad = parseInt(layoutSettings.xPad);
				var yPad = parseInt(layoutSettings.yPad);
				var xStackPad = xPad/2;
				var yStackPad = yPad/2;
				var maxPer = (layoutSettings.maxPer > 0) ? layoutSettings.maxPer : 0;

				// Title variables
				var titleGroupName = 'Titles';
				var titleStyleName = 'Symbol Group Title';
				var titleStyleFont = 'Helvetica Neue Medium Italic';
				var titleTextSize = 20;
				var titleTextHeight = 24;
				var titleTextAlign = (layoutSettings.sortDirection == 0) ? 0 : 1;
				var titleGroupX = (layoutSettings.sortDirection == 0) ? 0 : -xPad;
				var titleGroupY = (layoutSettings.sortDirection == 0) ? -(titleTextHeight+yPad) : 0;

				// If user wants to remove unused symbols...
				if (layoutSettings.removeSymbols == 1) {
					// Document variables
					var pagesLoop = pages.objectEnumerator();
					var thisPage;

					// Symbol variables
					var exemptSymbols = [];
					var removedSymbolCount = 0;

					// Iterate through each page and find children
					while (thisPage = pagesLoop.nextObject()) {
						// Children variables
						var children = thisPage.children();
						var loopChildren = children.objectEnumerator();
						var child;

						// Iterate through each child...
						while (child = loopChildren.nextObject()) {
							// If child is a symbol instance and has overrides...
							if (child.class() == "MSSymbolInstance" && child.overrides()) {
								// Create object of overrides
								var overrides = child.overrides().allValues();

								// Iterate through overrides
								for (var i = 0; i < overrides.count(); i++) {
									// Function to add each override symbol ID to exempt symbols object
									pushOverrideSymbolIDtoArray(overrides.objectAtIndex(i),exemptSymbols);
								}
							}

							// If child is a symbol master...
							if (child.class() == "MSSymbolMaster") {
								// If this symbol does not reside on the symbols page...
								if (thisPage.name() != 'Symbols') {
									// Add this symbol ID to exempt symbols object
									exemptSymbols.push(String(child.symbolID()));
								} else {
									// Layer variables
									var layers = child.children();
									var loopLayers = layers.objectEnumerator();
									var layer;
									var exemptions = 0;

									// Iterate through layers
									while (layer = loopLayers.nextObject()) {
										// If layer is a symbol instance...
										if (layer.class() == "MSSymbolInstance" && layer.symbolMaster()) {
											// Add symbol master ID to exempt symbols object
											exemptSymbols.push(String(layer.symbolMaster().symbolID()));

											// Increment exemption counter
											exemptions++;
										}
									}

									// If this symbol had nested symbols...
									if (exemptions > 0) {
										// Add this symbol ID to exempt symbols object
										exemptSymbols.push(String(child.symbolID()));
									}
								}
							}
						}
					}

					// Call function to remove unused symbols
					removeUnusedSymbols();
				}

				// Find titles group
				var titleGroup = findLayerByName(page,titleGroupName);

				// If titles group exists, remove it
				if (titleGroup) page.removeLayer(titleGroup);

				// If the document still has symbols...
				if (pageHasSymbols()) {
					// Create a symbols object, of either all symbols or just Symbols page symbols
					var symbols = (layoutSettings.gatherSymbols == 1) ? doc.documentData().allSymbols() : page.symbols();

					// Sort the symbols object by name
					var sortByName = [NSSortDescriptor sortDescriptorWithKey:"name" ascending:1];
					symbols = [symbols sortedArrayUsingDescriptors:[sortByName]];

					// if user wants to rename duplicate symbols...
					if (layoutSettings.renameSymbols == 1) {
						symbols = renameDuplicateSymbols(symbols);
					}

					// Sort the layer list
					sortLayerList(symbols,layoutSettings.reverseOrder);

					// Create the group object
					var groupLayout = createGroupObject(symbols,layoutSettings.groupDepth);

					// Reset page origin
					page.setRulerBase(CGPointMake(0,0));

					// If user wants to display group titles...
					if (layoutSettings.displayTitles == 1) {
						// Add title style
						addTextStyle(titleStyleName,titleStyleFont,titleTextSize,titleTextHeight,titleTextAlign);

						// Add title group
						titleGroup = addLayerGroup(page,titleGroupName,titleGroupX,titleGroupY,true);

						// Set clickThrough and lock title group
						titleGroup.setIsLocked(true);
						titleGroup.setHasClickThrough(true);
					}

					// Set tracker/counters
					var groupSpace = 0;
					var stackOffset = 0;
					var stackSpace = 0;
					var groupCount = 1;
					var objectCount = 1;

					// Iterate through the group object
					for (var i = 0; i < groupLayout.length; i++) {
						// Symbol variables
						var symbol = symbols.objectAtIndex(i);
						var symbolFrame = symbol.frame();

						// If user wants to display titles, and this is the first item in the first group, or a brand new group...
						if (layoutSettings.displayTitles == 1 && (objectCount == 1 || groupCount != groupLayout[i]['group'])) {
							// Title position variables
							var titleTextX = 0;
							var titleTextY = 0;
							var titleTextAlign = 0;

							// Update title position variables per the layout direction
							if (layoutSettings.sortDirection == 0) {
								titleTextX = (objectCount == 1) ? 0 : x+groupSpace+xPad;
							} else {
								titleTextY = (objectCount == 1) ? 0 : y+groupSpace+yPad;
								titleTextAlign = 1;
							}

							// Add the title into the title group
							addGroupTitle(titleGroup,groupLayout[i]['prefix'],titleTextX,titleTextY,titleTextAlign);
						}

						// If the current group number doesn't match the group counter
						if (groupLayout[i]['group'] != groupCount) {
							// Update group position variables per the layout direction
							if (layoutSettings.sortDirection == 0) {
								// Reset y position, set the x position of the next row
								y = 0;
								x += groupSpace + xPad;
							} else {
								// Reset x position, set the y position of the next row
								x = 0;
								y += groupSpace + yPad;
							}

							// Reset the group space tracker
							groupSpace = 0;

							// Reset the stack space tackers
							stackOffset = 0;
							stackSpace = 0;

							// Increment the group counter
							groupCount++;

							// Reset the object counter
							objectCount = 1;
						}

						// If the max per row is greater than 0, and object count is greater than max per row
						if (maxPer > 0 && objectCount > maxPer) {
							// Update group position variables per the layout direction
							if (layoutSettings.sortDirection == 0) {
								// Reset y position, set the x position of the next row
								y = 0;
								x += groupSpace + xPad;
							} else {
								// Reset x position, set the y position of the next row
								x = 0;
								y += groupSpace + yPad;
							}

							// Reset the group space tracker
							groupSpace = 0;

							// Reset the stack space tacker
							stackOffset = 0;
							stackSpace = 0;

							// Reset the object counter
							objectCount = 1;
						}

						// If not using compact layout...
						if(layoutSettings.compactLayout == 0){
							// Position the symbol
							symbolFrame.x = x;
							symbolFrame.y = y;

							if (layoutSettings.sortDirection == 0) {
								// Set the y position for the next symbol
								y += symbolFrame.height() + yPad;
							} else {
								// Set the x position for the next symbol
								x += symbolFrame.width() + xPad;
							}
						} else {
							if (layoutSettings.sortDirection == 0) {
								// If the symbol can't be stacked
								if (stackOffset + symbolFrame.width() > groupLayout[i]['groupMax']){
									// Increase the y position
									y += stackSpace + yPad;

									// Reset stack					
									stackOffset = 0;
									stackSpace = 0;
								}

								// Position the symbol
								symbolFrame.y = y;
								symbolFrame.x = x + stackOffset;

								// Increase stackOffset for next symbol
								stackOffset += symbolFrame.width() + xStackPad;
							} else {
								// If the symbol can't be stacked
								if (stackOffset + symbolFrame.height() > groupLayout[i]['groupMax']){
									// Increase the x position
									x += stackSpace + xPad;

									// Reset stack					
									stackOffset = 0;
									stackSpace = 0;
								}

								// Position the symbol
								symbolFrame.x = x;
								symbolFrame.y = y + stackOffset;

								// Increase stackOffset for next symbol
								stackOffset += symbolFrame.height() + yStackPad;
							}
						}

						// Update group position variables per the layout direction
						if (layoutSettings.sortDirection == 0) {
							// If this symbol is wider than previous symbols in row
							if (symbolFrame.width() > groupSpace) {
								// Increase the width of the row
								groupSpace = symbolFrame.width();
							}

							// If this symbol is taller than previous symbols in stack
							if (symbolFrame.height() > stackSpace) {
								// Increase the height of the stack
								stackSpace = symbolFrame.height();
							}
						} else {
							// If this symbol is taller than previous symbols in row
							if (symbolFrame.height() > groupSpace) {
								// Increase the height of the row
								groupSpace = symbolFrame.height();
							}

							// If this symbol is wider than previous symbols in stack
							if (symbolFrame.width() > stackSpace) {
								// Increase the width of the stack
								stackSpace = symbolFrame.width();
							}
						}

						// Increment the object counter
						objectCount++;
					}

					// If user wants to display group titles...
					if (layoutSettings.displayTitles == 1) {
						// Resize the titles group to ensure dimensions reflect contents
						titleGroup.resizeToFitChildrenWithOption(0);
					}

					// Collapse symbols
					actionWithType("MSCollapseAllGroupsAction").doPerformAction(nil);

					// Feedback to user
					if (layoutSettings.removeSymbols == 1 && removedSymbolCount > 0) {
						doc.showMessage("Symbol layout complete! " + removedSymbolCount + " unused symbols were removed.");
					} else {
						doc.showMessage("Symbol layout complete!");
					}
				}
			}
		} else {
			displayDialog("This page contains artboards and symbols. Symbol Organizer can only be used on pages with just symbols.",pluginName);
		}
	}

	function displayDialog(body,title) {
		var app = NSApplication.sharedApplication();
		app.displayDialog_withTitle(body,title);
	}

	function pageHasSymbols() {
		if (context.document.currentPage().symbols().count() == 0) {
			displayDialog("There are no symbols to organize on this page.",pluginName);
			return false;
		} return true;
	}

	function getLayoutSettings() {
		// Setting variables
		var defaultSettings = {};
		defaultSettings.groupDepth = 1;
		defaultSettings.displayTitles = 0;
		defaultSettings.compactLayout = 1;
		defaultSettings.sortDirection = 0;
		defaultSettings.xPad = '100';
		defaultSettings.yPad = '100';
		defaultSettings.maxPer = '';
		defaultSettings.reverseOrder = 0;
		defaultSettings.renameSymbols = 0;
		defaultSettings.gatherSymbols = 0;
		defaultSettings.removeSymbols = 0;

		// Update default settings with cached settings
		defaultSettings = getCachedSettings(page,defaultSettings);

		// Establish the alert window
		var alertWindow = COSAlertWindow.new();
		alertWindow.setIcon(NSImage.alloc().initByReferencingFile(context.plugin.urlForResourceNamed("icon.png").path()));
		alertWindow.setMessageText(pluginName);

		// Grouping options
		var groupFrame = NSView.alloc().initWithFrame(NSMakeRect(0,0,300,152));
		alertWindow.addAccessoryView(groupFrame);

		var groupGranularityLabel = createLabel('Group Definition',12,NSMakeRect(0,136,140,16));
		groupFrame.addSubview(groupGranularityLabel);

		var groupGranularityDescription = createDescription('Symbol Organizer uses a "/" in the name of each symbol to define the groups. This setting determines which "/" should be used.',11,NSMakeRect(0,90,300,42));
		groupFrame.addSubview(groupGranularityDescription);

		var groupGranularityValue = createSelect(['1st','2nd','3rd','4th','5th','6th','7th','8th'],defaultSettings.groupDepth,NSMakeRect(0,54,60,28));
		groupFrame.addSubview(groupGranularityValue);

		var groupTitlesCheckbox = createCheckbox({name:"Display group titles",value:1},defaultSettings.displayTitles,NSMakeRect(0,28,300,18));
		groupFrame.addSubview(groupTitlesCheckbox);

		var compactLayoutCheckbox = createCheckbox({name:"Compact layout",value:1},defaultSettings.compactLayout,NSMakeRect(0,0,300,18));
		groupFrame.addSubview(compactLayoutCheckbox);

		// Layout options
		var layoutFrame = NSView.alloc().initWithFrame(NSMakeRect(0,0,300,239));
		alertWindow.addAccessoryView(layoutFrame);

		var layoutDirectionLabel = createLabel('Layout Direction',12,NSMakeRect(0,208,140,16));
		layoutFrame.addSubview(layoutDirectionLabel);

		var layoutDirectionValue = createRadioButtons(['Horizontal','Vertical'],defaultSettings.sortDirection,0,0,153);
		layoutFrame.addSubview(layoutDirectionValue);

		var layoutHorizontalLabel = createLabel('Horizontal Space',12,NSMakeRect(0,137,140,16));
		layoutFrame.addSubview(layoutHorizontalLabel);

		var layoutHorizontalValue = createField(defaultSettings.xPad,NSMakeRect(0,110,60,22));
		layoutFrame.addSubview(layoutHorizontalValue);

		var layoutVerticalLabel = createLabel('Vertical Space',12,NSMakeRect(0,82,140,16));
		layoutFrame.addSubview(layoutVerticalLabel);

		var layoutVerticalValue = createField(defaultSettings.yPad,NSMakeRect(0,55,60,22));
		layoutFrame.addSubview(layoutVerticalValue);

		var layoutMaxLabel = createLabel('Max Per Row/Column',12,NSMakeRect(0,27,140,16));
		layoutFrame.addSubview(layoutMaxLabel);

		var layoutMaxValue = createField(defaultSettings.maxPer,NSMakeRect(0,0,60,22));
		layoutFrame.addSubview(layoutMaxValue);

		// Other options
		var otherFrame = NSView.alloc().initWithFrame(NSMakeRect(0,0,300,161));
		alertWindow.addAccessoryView(otherFrame);

		var reverseOrderCheckbox = createCheckbox({name:"Reverse layer list sort order",value:1},defaultSettings.reverseOrder,NSMakeRect(0,126,300,18));
		otherFrame.addSubview(reverseOrderCheckbox);

		var renameSymbolsCheckbox = createCheckbox({name:"Sequentially number duplicate symbols",value:1},defaultSettings.renameSymbols,NSMakeRect(0,98,300,18));
		otherFrame.addSubview(renameSymbolsCheckbox);

		var gatherSymbolsCheckbox = createCheckbox({name:"Gather symbols from other pages",value:1},defaultSettings.gatherSymbols,NSMakeRect(0,70,300,18));
		otherFrame.addSubview(gatherSymbolsCheckbox);

		var removeSymbolsCheckbox = createCheckbox({name:"Remove unused symbols",value:1},defaultSettings.removeSymbols,NSMakeRect(0,42,300,18));
		otherFrame.addSubview(removeSymbolsCheckbox);

		var removeSymbolsDescription = createDescription('This option will NOT remove nested symbols, symbols with nested symbols, symbols used as overrides, or symbols that reside on other pages.',11,NSMakeRect(18,0,282,42));
		otherFrame.addSubview(removeSymbolsDescription);

		// Buttons
		alertWindow.addButtonWithTitle('OK');
		alertWindow.addButtonWithTitle('Cancel');

		// Set key order and first responder
		setKeyOrder(alertWindow,[
			groupGranularityValue,
			groupTitlesCheckbox,
			compactLayoutCheckbox,
			layoutDirectionValue,
			layoutHorizontalValue,
			layoutVerticalValue,
			layoutMaxValue,
			reverseOrderCheckbox,
			renameSymbolsCheckbox,
			gatherSymbolsCheckbox,
			removeSymbolsCheckbox
		]);

		var responseCode = alertWindow.runModal();

		if (responseCode == 1000) {
			try {
				[command setValue:[groupGranularityValue indexOfSelectedItem] forKey:"groupDepth" onLayer:page];
				[command setValue:[groupTitlesCheckbox state] forKey:"displayTitles" onLayer:page];
				[command setValue:[compactLayoutCheckbox state] forKey:"compactLayout" onLayer:page];
				[command setValue:[[layoutDirectionValue selectedCell] tag] forKey:"sortDirection" onLayer:page];
				[command setValue:[layoutHorizontalValue stringValue] forKey:"xPad" onLayer:page];
				[command setValue:[layoutVerticalValue stringValue] forKey:"yPad" onLayer:page];
				[command setValue:[layoutMaxValue stringValue] forKey:"maxPer" onLayer:page];
				[command setValue:[reverseOrderCheckbox state] forKey:"reverseOrder" onLayer:page];
				[command setValue:[renameSymbolsCheckbox state] forKey:"renameSymbols" onLayer:page];
				[command setValue:[gatherSymbolsCheckbox state] forKey:"gatherSymbols" onLayer:page];
				[command setValue:0 forKey:"removeSymbols" onLayer:page];
			} catch(err) {
				log("Unable to save settings.");
			}

			return {
				groupDepth : [groupGranularityValue indexOfSelectedItem],
				displayTitles : [groupTitlesCheckbox state],
				compactLayout : [compactLayoutCheckbox state],
				sortDirection : [[layoutDirectionValue selectedCell] tag],
				xPad : [layoutHorizontalValue stringValue],
				yPad : [layoutVerticalValue stringValue],
				maxPer : [layoutMaxValue stringValue],
				reverseOrder : [reverseOrderCheckbox state],
				renameSymbols : [renameSymbolsCheckbox state],
				gatherSymbols : [gatherSymbolsCheckbox state],
				removeSymbols : [removeSymbolsCheckbox state]
			}
		} else return false;
	}

	function createSelect(items,selectedItemIndex,frame) {
		selectedItemIndex = (selectedItemIndex > -1) ? selectedItemIndex : 0;
		var comboBox = [[NSComboBox alloc] initWithFrame:frame];
		[comboBox addItemsWithObjectValues:items];
		[comboBox selectItemAtIndex:selectedItemIndex];

		return comboBox;
	}

	function createRadioButtons(options,selected,format,x,y) {
		// Set number of rows and columns
		if (!format || format == 0) {
			var rows = options.length;
			var columns = 1;
			var buttonMatrixWidth = 300;
			var buttonCellWidth = buttonMatrixWidth;
		} else {
			var rows = options.length / 2;
			var columns = 2;
			var buttonMatrixWidth = 300;
			var buttonCellWidth = buttonMatrixWidth / columns;
		}

		var x = (x) ? x : 0;
		var y = (y) ? y : 0;

		// Make a prototype cell
		var buttonCell = [[NSButtonCell alloc] init];
		[buttonCell setButtonType:NSRadioButton]

		// Make a matrix to contain the radio cells
		var buttonMatrix = [[NSMatrix alloc] initWithFrame: NSMakeRect(x,y,buttonMatrixWidth,rows*25) mode:NSRadioModeMatrix prototype:buttonCell numberOfRows:rows numberOfColumns:columns];
		[buttonMatrix setCellSize: NSMakeSize(buttonCellWidth,20)];

		// Create a cell for each option
		for (i = 0; i < options.length; i++) {
			[[[buttonMatrix cells] objectAtIndex: i] setTitle: options[i]];
			[[[buttonMatrix cells] objectAtIndex: i] setTag: i];
		}

		// Select the default cell
		[buttonMatrix selectCellAtRow:selected column:0]

		// Return the matrix
		return buttonMatrix;
	}

	function createField(value,frame) {
		var field = [[NSTextField alloc] initWithFrame:frame];
		[field setStringValue:value];

		return field;
	}

	function createLabel(text,size,frame) {
		var label = [[NSTextField alloc] initWithFrame:frame];
		[label setStringValue:text];
		[label setFont:[NSFont boldSystemFontOfSize:size]];
		[label setBezeled:false];
		[label setDrawsBackground:false];
		[label setEditable:false];
		[label setSelectable:false];

		return label;
	}

	function createDescription(text,size,frame) {
		var label = [[NSTextField alloc] initWithFrame:frame];
		[label setStringValue:text];
		[label setFont:[NSFont systemFontOfSize:size]];
		[label setTextColor:[NSColor colorWithCalibratedRed:(0/255) green:(0/255) blue:(0/255) alpha:0.6]];
		[label setBezeled:false];
		[label setDrawsBackground:false];
		[label setEditable:false];
		[label setSelectable:false];

		return label;
	}

	function createCheckbox(item,flag,frame) {
		flag = ( flag == false ) ? NSOffState : NSOnState;
		var checkbox = [[NSButton alloc] initWithFrame:frame];
		[checkbox setButtonType: NSSwitchButton];
		[checkbox setBezelStyle: 0];
		[checkbox setTitle: item.name];
		[checkbox setTag: item.value];
		[checkbox setState: flag];

		return checkbox;
	}

	function pushOverrideSymbolIDtoArray(overrideObject,array) {
		if (
			overrideObject.class() == "__NSDictionaryI" ||
			overrideObject.class() == "__NSDictionaryM" ||
			overrideObject.class() == "__NSSingleEntryDictionaryI" ||
			overrideObject.class() == "__NSSingleEntryDictionaryM"
		) {
			if (overrideObject.objectForKey("symbolID")) {
				array.push(String(overrideObject.objectForKey("symbolID")));
			}

			for (var i = 0; i < overrideObject.allValues().count(); i++) {
				pushOverrideSymbolIDtoArray(overrideObject.allValues().objectAtIndex(i),array);
			}
		}
	}

	function removeUnusedSymbols() {
		var count = 0;
		var symbols = context.document.documentData().allSymbols();
		var symbolsLoop = symbols.objectEnumerator();
		var symbol;

		while (symbol = symbolsLoop.nextObject()) {
			if (!symbol.hasInstances() && exemptSymbols.indexOf(String(symbol.symbolID())) == -1) {
				symbol.removeFromParent();
				count++;
				removedSymbolCount++;
			}
		}

		if (count != 0) {
			removeUnusedSymbols();
		}
	}

	function findLayerByName(scope,name,type) {
		var scope = scope.layers();

		if (scope) {
			for (var i = 0; i < scope.count(); i++) {
				var layerName = scope.objectAtIndex(i).name().trim();

				if ((!type && layerName == name) || (type && layerName == name && scope.objectAtIndex(i) instanceof type)) {
					return scope.objectAtIndex(i);
				}
			}
		}

		return false;
	}

	function renameDuplicateSymbols(symbols) {
		var symbolLoop = symbols.objectEnumerator();
		var symbol;
		var lastSymbolName;
		var duplicateSymbolCount = 0;

		while (symbol = symbolLoop.nextObject()) {
			var thisSymbolName = String(symbol.name());

			if (thisSymbolName == lastSymbolName) {
				duplicateSymbolCount++;

				symbol.setName(thisSymbolName + " Copy " + duplicateSymbolCount);
			} else {
				duplicateSymbolCount = 0;
			}

			lastSymbolName = thisSymbolName;
		}

		return symbols;
	}

	function sortLayerList(symbols,order) {
		var symbols = (order == 1) ? [[symbols reverseObjectEnumerator] allObjects] : symbols;
		var symbolIndices = [];
		var symbolLoop = symbols.objectEnumerator();
		var symbol;

		while (symbol = symbolLoop.nextObject()) {
			symbolIndices.push(symbols.indexOfObject(symbol));
		}

		var removeLoop = symbols.objectEnumerator();
		var symbolToRemove;

		while (symbolToRemove = removeLoop.nextObject()) {
			symbolToRemove.removeFromParent();
		}

		for (var i = 0; i < symbolIndices.length; i++) {
			[[doc currentPage] insertLayers:[NSArray arrayWithObject:symbols[i]] atIndex:symbolIndices[i]];
		}
	}

	function createGroupObject(symbols,depth) {
		// Group variables
		var groupCount = 0;
		var groupLayout = [];
		var lastGroupPrefix;

		// Per-group variables;
		var groupMax = [];

		// Iterate through the symbols
		for (var i = 0; i < symbols.count(); i++) {
			// Symbol variables
			var symbol = symbols.objectAtIndex(i);
			var symbolName = symbol.name();
			var symbolFrame = symbol.frame();

			// Determine a break point in the symbol name
			var breakPoint = (symbolName.indexOf("/") != -1) ? getCharPosition(symbolName,"/",depth+1) : 0;

			// Set a prefix for current group
			var thisGroupPrefix = (breakPoint > 0) ? symbolName.slice(0,breakPoint) : symbolName;

			// If this group prefix is not the same as last group
			if (lastGroupPrefix != thisGroupPrefix) {
				// Increment the group counter
				groupCount++;
				// Initialize groupMax
				groupMax[groupCount] = 0;
			}

			// Compute the max width or height of the current group
			if (layoutSettings.sortDirection == 0) {
				// If this symbol is wider than previous symbols in this group
				if (symbolFrame.width() > groupMax[groupCount]) {
					// Increase the max width of this group
					groupMax[groupCount] = symbolFrame.width();
				}
			} else {
				// If this symbol is taller than previous symbols in this group
				if (symbolFrame.height() > groupMax[groupCount]) {
					// Increase the max height of this group
					groupMax[groupCount] = symbolFrame.height();
				}
			}

			// Add an entry to the group object
			groupLayout.push({
				prefix: thisGroupPrefix,
				group: groupCount
			});

			// Set the last group prefix to current prefix
			lastGroupPrefix = thisGroupPrefix;
		}

		// Iterate through groupLayout to set groupMax for each symbol
		for (var i = 0; i < groupLayout.length; i++){
			groupCount = groupLayout[i]["group"];
			groupLayout[i]["groupMax"] = groupMax[groupCount];
		}

		return groupLayout;
	}

	function getCharPosition(string,match,count) {
		var actualCount = string.split(match).length - 1;

		if (actualCount < count) {
			return string.split(match,actualCount).join(match).length;
		} else {
			return string.split(match,count).join(match).length;
		}
	}

	function addTextStyle(styleName,fontName,fontSize,fontLineHeight,textAlignment) {
		getTextStyleByName(styleName,1);

		var textStyles = doc.documentData().layerTextStyles();

		var textStyle = [[MSTextLayer alloc] initWithFrame:nil];
		textStyle.setFontSize(fontSize);
		textStyle.setLineHeight(fontLineHeight);
		textStyle.setTextAlignment(textAlignment);
		textStyle.setFontPostscriptName(fontName);

		textStyles.addSharedStyleWithName_firstInstance(styleName,textStyle.style());
	}

	function getTextStyleByName(styleName,removeStyle) {
		var textStyles = doc.documentData().layerTextStyles().objects();

		if (textStyles) {
			for (var i = 0; i < textStyles.count(); i++) {
				if (textStyles.objectAtIndex(i).name() == styleName) {
					if (removeStyle && removeStyle == 1) {
						doc.documentData().layerTextStyles().removeSharedStyle(textStyles.objectAtIndex(i));
						return false;
					} else {
						return textStyles.objectAtIndex(i);
					}
				}
			}
		}

		return false;
	}

	function addLayerGroup(output,layerName,x,y,isUnique) {
		var layerGroup = findLayerByName(output,layerName);

		if (isUnique && layerGroup) {
			layerGroup.frame().setX(x);
			layerGroup.frame().setY(y);
		} else {
			layerGroup = MSLayerGroup.new();
			layerGroup.setName(layerName);
			layerGroup.frame().setX(x);
			layerGroup.frame().setY(y);

			output.addLayers([layerGroup]);
		}

		return layerGroup;
	}

	function addGroupTitle(titleGroup,title,x,y,alignment) {
		// Add screen title
		var screenTitle = addTextLayer(titleGroup,title,title,0,false);

		// Set screen title position
		if (alignment == 0) {
			screenTitle.frame().setY(y);
			screenTitle.frame().setX(x);
		} else {
			screenTitle.frame().setY(y);
			screenTitle.frame().setX(x-screenTitle.frame().width());
		}

		var screenTitleStyle = getTextStyleByName(titleStyleName);

		// Set screen title style
		screenTitle.setStyle(screenTitleStyle.newInstance());
	}

	function addTextLayer(output,layerName,layerValue,layerWidth,isLocked) {
		var textLayer = MSTextLayer.new();
		textLayer.setStringValue(layerValue);
		textLayer.setName(layerName);
		textLayer.setIsLocked(isLocked);

		if (layerWidth > 0) {
			textLayer.setTextBehaviour(1);
			textLayer.frame().setWidth(layerWidth);
		}

		output.addLayers([textLayer]);

		return textLayer;
	}

	function getCachedSettings(location,settings) {
		try {
			for (i in settings) {
				if ([command valueForKey:i onLayer:location]) {
					settings[i] = [command valueForKey:i onLayer:location];
				}
			}

			return settings;
		} catch(err) {
			log("Unable to fetch settings.");
		}
	}

	function setKeyOrder(alert,order) {
		for (var i = 0; i < order.length; i++) {
			var thisItem = order[i];
			var nextItem = order[i+1];

			if (nextItem) thisItem.setNextKeyView(nextItem);
		}

		alert.alert().window().setInitialFirstResponder(order[0]);
	}

	function actionWithType(type) {
		var controller = doc.actionsController();

		if (controller.actionWithName) {
			return controller.actionWithName(type);
		} else if (controller.actionWithID) {
			return controller.actionWithID(type);
		} else {
			return controller.actionForID(type);
		}
	}
};
